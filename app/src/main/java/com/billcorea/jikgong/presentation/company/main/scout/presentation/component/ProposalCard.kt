package com.billcorea.jikgong.presentation.company.main.scout.presentation.component

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Phone
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.billcorea.jikgong.api.models.sampleDataFactory.DataFactoryModels.Proposal
import com.billcorea.jikgong.api.models.sampleDataFactory.DataFactoryModels.ProposalStatus
import com.billcorea.jikgong.ui.theme.Jikgong1111Theme
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.text.NumberFormat
import java.util.*

// Í∏àÏï°ÏóêÏÑú Ïà´Ïûê Ï∂îÏ∂ú Î∞è ÌòïÏãùÌôî Ìï®Ïàò
private fun formatProposalWage(wageString: String): String {
    return when {
        // "20ÎßåÏõê" ÌòïÏãù Ï≤òÎ¶¨
        wageString.contains("ÎßåÏõê") -> {
            val numberRegex = "(\\d+)ÎßåÏõê".toRegex()
            val matchResult = numberRegex.find(wageString)
            if (matchResult != null) {
                val amount = matchResult.groupValues[1].toIntOrNull()
                if (amount != null) {
                    "${NumberFormat.getNumberInstance(Locale.KOREA).format(amount * 10000)}Ïõê"
                } else {
                    wageString
                }
            } else {
                wageString
            }
        }
        // "200000Ïõê" ÌòïÏãù Ï≤òÎ¶¨ (6ÏûêÎ¶¨ Ïù¥ÏÉÅ)
        wageString.contains("Ïõê") -> {
            val numberRegex = "(\\d{6,})Ïõê".toRegex()
            val matchResult = numberRegex.find(wageString)
            if (matchResult != null) {
                val amount = matchResult.groupValues[1].toIntOrNull()
                if (amount != null) {
                    "${NumberFormat.getNumberInstance(Locale.KOREA).format(amount)}Ïõê"
                } else {
                    wageString
                }
            } else {
                wageString
            }
        }
        // Í∏∞ÌÉÄ Í≤ΩÏö∞ ÏõêÎ≥∏ Î∞òÌôò
        else -> wageString
    }
}

@Composable
fun ProposalCard(
  proposal: Proposal,
  onClick: () -> Unit,
  modifier: Modifier = Modifier
) {
  Card(
    modifier = modifier
      .fillMaxWidth()
      .clickable { onClick() },
    shape = RoundedCornerShape(12.dp),
    colors = CardDefaults.cardColors(
      containerColor = Color.White
    ),
    elevation = CardDefaults.cardElevation(
      defaultElevation = 1.dp
    )
  ) {
    Column(
      modifier = Modifier
        .fillMaxWidth()
        .padding(12.dp)
    ) {
      // ÏÉÅÎã®: Ïù¥Î¶Ñ, ÏóÖÏ¢Ö, ÏÉÅÌÉúÎ•º Ìïú Ï§ÑÏóê
      Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
      ) {
        Row(
          modifier = Modifier.weight(1f),
          verticalAlignment = Alignment.CenterVertically,
          horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
          // Ïù¥Î¶Ñ (Îçî ÌÅ∞ Ìè∞Ìä∏)
          Text(
            text = proposal.workerName,
            style = MaterialTheme.typography.titleLarge.copy(
              fontWeight = FontWeight.ExtraBold
            ),
            color = Color.Black
          )
          
          // ÏóÖÏ¢Ö Î±ÉÏßÄÎì§ (ÎààÏóê ÎùÑÍ≤å)
          proposal.jobTypes.take(2).forEach { jobType ->
            Surface(
              shape = RoundedCornerShape(12.dp),
              color = Color(0xFF4B7BFF).copy(alpha = 0.15f)
            ) {
              Text(
                text = jobType,
                modifier = Modifier.padding(horizontal = 8.dp, vertical = 3.dp),
                style = MaterialTheme.typography.labelMedium.copy(
                  fontWeight = FontWeight.Bold
                ),
                color = Color(0xFF4B7BFF)
              )
            }
          }
        }

        StatusBadge(status = proposal.status)
      }

      Spacer(modifier = Modifier.height(8.dp))

      // ÌïµÏã¨ Ï†ïÎ≥¥Î•º Ïª¥Ìå©Ìä∏ÌïòÍ≤å Î∞∞Ïπò
      Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
      ) {
        // ÏôºÏ™Ω: Í±∞Î¶¨, ÌèâÏ†ê, Í≤ΩÎ†•
        Row(
          horizontalArrangement = Arrangement.spacedBy(12.dp),
          verticalAlignment = Alignment.CenterVertically
        ) {
          Row(verticalAlignment = Alignment.CenterVertically) {
            Text(
              text = "üìç",
              style = MaterialTheme.typography.bodyMedium
            )
            Spacer(modifier = Modifier.width(3.dp))
            Text(
              text = proposal.distance,
              style = MaterialTheme.typography.bodyMedium.copy(
                fontWeight = FontWeight.Medium
              ),
              color = Color(0xFF666666)
            )
          }
          
          Row(verticalAlignment = Alignment.CenterVertically) {
            Text(
              text = "‚≠ê",
              style = MaterialTheme.typography.bodyMedium
            )
            Spacer(modifier = Modifier.width(3.dp))
            Text(
              text = "4.5",
              style = MaterialTheme.typography.bodyMedium.copy(
                fontWeight = FontWeight.Medium
              ),
              color = Color(0xFF666666)
            )
          }
          
          Row(verticalAlignment = Alignment.CenterVertically) {
            Text(
              text = "üíº",
              style = MaterialTheme.typography.bodyMedium
            )
            Spacer(modifier = Modifier.width(3.dp))
            Text(
              text = "5ÎÖÑ", // Mock data - Ïã§Ï†úÎ°úÎäî proposalÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®
              style = MaterialTheme.typography.bodyMedium.copy(
                fontWeight = FontWeight.Medium
              ),
              color = Color(0xFF666666)
            )
          }
        }

        // Ïò§Î•∏Ï™Ω: Ï†úÏïà Í∏àÏï° (Îß§Ïö∞ Í∞ïÏ°∞)
        Surface(
          shape = RoundedCornerShape(8.dp),
          color = Color(0xFF4B7BFF)
        ) {
          Text(
            text = formatProposalWage(proposal.proposedWage),
            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),
            style = MaterialTheme.typography.titleMedium.copy(
              fontWeight = FontWeight.ExtraBold
            ),
            color = Color.White
          )
        }
      }

      // ÎÇ†Ïßú Ï†ïÎ≥¥ (Ïª¥Ìå©Ìä∏ÌïòÍ≤å)
      Spacer(modifier = Modifier.height(6.dp))
      Text(
        text = proposal.toDisplayInfo(),
        style = MaterialTheme.typography.labelMedium,
        color = Color(0xFF888888)
      )

      // Î©îÏãúÏßÄ (Îçî Ïª¥Ìå©Ìä∏ÌïòÍ≤å)
      if (proposal.message.isNotEmpty()) {
        Spacer(modifier = Modifier.height(8.dp))
        Text(
          text = "üí¨ ${proposal.message}",
          style = MaterialTheme.typography.bodySmall.copy(
            fontWeight = FontWeight.Medium
          ),
          color = Color(0xFF555555),
          maxLines = 2,
          overflow = TextOverflow.Ellipsis
        )
      }

      // ÏàòÎùΩÎêú Í≤ΩÏö∞ Ïó∞ÎùΩÏ≤ò ÌëúÏãú (Ïù∏ÎùºÏù∏ÏúºÎ°ú)
      if (proposal.status == ProposalStatus.ACCEPTED && proposal.workerPhone != null) {
        Spacer(modifier = Modifier.height(6.dp))
        Row(
          modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(6.dp))
            .clickable { /* TODO: Ï†ÑÌôî Í±∏Í∏∞ */ }
            .background(Color(0xFF4B7BFF).copy(alpha = 0.1f))
            .padding(8.dp),
          verticalAlignment = Alignment.CenterVertically,
          horizontalArrangement = Arrangement.spacedBy(6.dp)
        ) {
          Icon(
            imageVector = Icons.Default.Phone,
            contentDescription = "Ï†ÑÌôî",
            modifier = Modifier.size(14.dp),
            tint = Color(0xFF4B7BFF)
          )
          Text(
            text = proposal.workerPhone,
            style = MaterialTheme.typography.bodySmall.copy(
              fontWeight = FontWeight.Bold
            ),
            color = Color(0xFF4B7BFF)
          )
        }
      }

      // Í±∞Ï†à ÏÇ¨Ïú† (Ïù∏ÎùºÏù∏ÏúºÎ°ú, Îçî ÎààÏóê ÎùÑÍ≤å)
      if (proposal.status == ProposalStatus.REJECTED && proposal.rejectReason != null) {
        Spacer(modifier = Modifier.height(6.dp))
        Row(
          modifier = Modifier.fillMaxWidth(),
          verticalAlignment = Alignment.CenterVertically,
          horizontalArrangement = Arrangement.Center
        ) {
          Text(
            text = "‚ùå ${proposal.rejectReason}",
            style = MaterialTheme.typography.bodySmall.copy(
              fontWeight = FontWeight.Medium
            ),
            color = Color(0xFFE53E3E)
          )
        }
      }
    }
  }
}

@Composable
private fun InfoItem(
  icon: String,
  label: String,
  value: String,
  modifier: Modifier = Modifier
) {
  Row(
    modifier = modifier,
    verticalAlignment = Alignment.CenterVertically,
    horizontalArrangement = Arrangement.spacedBy(6.dp)
  ) {
    Text(
      text = icon,
      style = MaterialTheme.typography.bodyMedium
    )
    Column {
      Text(
        text = label,
        style = MaterialTheme.typography.labelMedium,
        color = Color.Gray
      )
      Text(
        text = value,
        style = MaterialTheme.typography.bodyMedium.copy(
          fontWeight = FontWeight.Bold
        ),
        color = Color.Black
      )
    }
  }
}

@Composable
private fun StatusBadge(status: ProposalStatus) {
  val (backgroundColor, textColor, text, icon) = when (status) {
    ProposalStatus.PENDING -> Quadruple(
      Color(0xFFFF6F00),
      Color.White,
      "ÎåÄÍ∏∞Ï§ë",
      "‚è≥"
    )
    ProposalStatus.ACCEPTED -> Quadruple(
      Color(0xFF00C853),
      Color.White,
      "ÏàòÎùΩ",
      "‚úÖ"
    )
    ProposalStatus.REJECTED -> Quadruple(
      Color(0xFFE53E3E),
      Color.White,
      "Í±∞Ï†à",
      "‚ùå"
    )
  }

  Surface(
    shape = RoundedCornerShape(16.dp),
    color = backgroundColor
  ) {
    Row(
      modifier = Modifier.padding(horizontal = 10.dp, vertical = 5.dp),
      verticalAlignment = Alignment.CenterVertically,
      horizontalArrangement = Arrangement.spacedBy(3.dp)
    ) {
      Text(
        text = icon,
        style = MaterialTheme.typography.labelSmall
      )
      Text(
        text = text,
        style = MaterialTheme.typography.labelMedium.copy(
          fontWeight = FontWeight.ExtraBold
        ),
        color = textColor
      )
    }
  }
}

// Helper data class for 4 values
private data class Quadruple<A, B, C, D>(
  val first: A,
  val second: B,
  val third: C,
  val fourth: D
)

@Preview(showBackground = true, backgroundColor = 0xFFF7F8FA)
@Composable
fun ProposalCardPendingPreview() {
  Jikgong1111Theme {
    ProposalCard(
      proposal = Proposal(
        id = "1",
        workerId = "worker1",
        workerName = "ÍπÄÏ≤†Ïàò",
        proposedWage = "ÏùºÎãπ 20ÎßåÏõê",
        message = "ÌîÑÎ°úÏ†ùÌä∏Ïóê Íº≠ ÌïÑÏöîÌïú Ïù∏Î†•ÏûÖÎãàÎã§. Ï¢ãÏùÄ Ï°∞Í±¥ÏúºÎ°ú Î™®ÏãúÍ≥† Ïã∂ÏäµÎãàÎã§.",
        status = ProposalStatus.PENDING,
        createdAt = LocalDateTime.now().minusHours(2),
        respondedAt = null,
        jobTypes = listOf("Ï≤†Í∑ºÍ≥µ", "ÌòïÌãÄÎ™©Í≥µ"),
        distance = "2.5km",
        workerPhone = null,
        rejectReason = null
      ),
      onClick = {},
      modifier = Modifier.padding(16.dp)
    )
  }
}

@Preview(showBackground = true, backgroundColor = 0xFFF7F8FA)
@Composable
fun ProposalCardAcceptedPreview() {
  Jikgong1111Theme {
    ProposalCard(
      proposal = Proposal(
        id = "2",
        workerId = "worker2",
        workerName = "Ïù¥ÏòÅÌù¨",
        proposedWage = "ÏùºÎãπ 18ÎßåÏõê",
        message = "Í≤ΩÎ†•Ïù¥ ÌíçÎ∂ÄÌïòÏã† Î∂ÑÏùÑ Ï∞æÍ≥† ÏûàÏäµÎãàÎã§.",
        status = ProposalStatus.ACCEPTED,
        createdAt = LocalDateTime.now().minusDays(1),
        respondedAt = LocalDateTime.now().minusHours(3),
        jobTypes = listOf("ÌÉÄÏùºÍ≥µ"),
        distance = "1.2km",
        workerPhone = "010-1234-5678",
        rejectReason = null
      ),
      onClick = {},
      modifier = Modifier.padding(16.dp)
    )
  }
}

@Preview(showBackground = true, backgroundColor = 0xFFF7F8FA)
@Composable
fun ProposalCardRejectedPreview() {
  Jikgong1111Theme {
    ProposalCard(
      proposal = Proposal(
        id = "3",
        workerId = "worker3",
        workerName = "Î∞ïÎØºÏàò",
        proposedWage = "ÏùºÎãπ 15ÎßåÏõê",
        message = "Ìï®Íªò ÏùºÌïòÍ≥† Ïã∂ÏäµÎãàÎã§.",
        status = ProposalStatus.REJECTED,
        createdAt = LocalDateTime.now().minusDays(2),
        respondedAt = LocalDateTime.now().minusDays(1),
        jobTypes = listOf("Ï†ÑÍ∏∞Í≥µ"),
        distance = "3.5km",
        workerPhone = null,
        rejectReason = "ÏùºÏ†ïÏù¥ ÎßûÏßÄ ÏïäÏäµÎãàÎã§"
      ),
      onClick = {},
      modifier = Modifier.padding(16.dp)
    )
  }
}